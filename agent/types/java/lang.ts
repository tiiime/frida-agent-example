export let AbstractMethodError = Java.use("java.lang.AbstractMethodError")
export let Appendable = Java.use("java.lang.Appendable")
export let ArithmeticException = Java.use("java.lang.ArithmeticException")
export let ArrayIndexOutOfBoundsException = Java.use("java.lang.ArrayIndexOutOfBoundsException")
export let ArrayStoreException = Java.use("java.lang.ArrayStoreException")
export let AssertionError = Java.use("java.lang.AssertionError")
export let AutoCloseable = Java.use("java.lang.AutoCloseable")
export let Boolean = Java.use("java.lang.Boolean")
export let BootstrapMethodError = Java.use("java.lang.BootstrapMethodError")
export let Byte = Java.use("java.lang.Byte")
export let Character = Java.use("java.lang.Character")
export let CharSequence = Java.use("java.lang.CharSequence")
export let Class = Java.use("java.lang.Class")
export let ClassCastException = Java.use("java.lang.ClassCastException")
export let ClassCircularityError = Java.use("java.lang.ClassCircularityError")
export let ClassFormatError = Java.use("java.lang.ClassFormatError")
export let ClassLoader = Java.use("java.lang.ClassLoader")
export let ClassNotFoundException = Java.use("java.lang.ClassNotFoundException")
export let Cloneable = Java.use("java.lang.Cloneable")
export let CloneNotSupportedException = Java.use("java.lang.CloneNotSupportedException")
export let Comparable = Java.use("java.lang.Comparable")
export let Compiler = Java.use("java.lang.Compiler")
export let Deprecated = Java.use("java.lang.Deprecated")
export let Double = Java.use("java.lang.Double")
export let Enum = Java.use("java.lang.Enum")
export let EnumConstantNotPresentException = Java.use("java.lang.EnumConstantNotPresentException")
export let Error = Java.use("java.lang.Error")
export let Exception = Java.use("java.lang.Exception")
export let ExceptionInInitializerError = Java.use("java.lang.ExceptionInInitializerError")
export let Float = Java.use("java.lang.Float")
export let FunctionalInterface = Java.use("java.lang.FunctionalInterface")
export let IllegalAccessError = Java.use("java.lang.IllegalAccessError")
export let IllegalAccessException = Java.use("java.lang.IllegalAccessException")
export let IllegalArgumentException = Java.use("java.lang.IllegalArgumentException")
export let IllegalMonitorStateException = Java.use("java.lang.IllegalMonitorStateException")
export let IllegalStateException = Java.use("java.lang.IllegalStateException")
export let IllegalThreadStateException = Java.use("java.lang.IllegalThreadStateException")
export let IncompatibleClassChangeError = Java.use("java.lang.IncompatibleClassChangeError")
export let IndexOutOfBoundsException = Java.use("java.lang.IndexOutOfBoundsException")
export let InheritableThreadLocal = Java.use("java.lang.InheritableThreadLocal")
export let InstantiationError = Java.use("java.lang.InstantiationError")
export let InstantiationException = Java.use("java.lang.InstantiationException")
export let Integer = Java.use("java.lang.Integer")
export let InternalError = Java.use("java.lang.InternalError")
export let InterruptedException = Java.use("java.lang.InterruptedException")
export let Iterable = Java.use("java.lang.Iterable")
export let LinkageError = Java.use("java.lang.LinkageError")
export let Long = Java.use("java.lang.Long")
export let Math = Java.use("java.lang.Math")
export let NegativeArraySizeException = Java.use("java.lang.NegativeArraySizeException")
export let NoClassDefFoundError = Java.use("java.lang.NoClassDefFoundError")
export let NoSuchFieldError = Java.use("java.lang.NoSuchFieldError")
export let NoSuchFieldException = Java.use("java.lang.NoSuchFieldException")
export let NoSuchMethodError = Java.use("java.lang.NoSuchMethodError")
export let NoSuchMethodException = Java.use("java.lang.NoSuchMethodException")
export let NullPointerException = Java.use("java.lang.NullPointerException")
export let Number = Java.use("java.lang.Number")
export let NumberFormatException = Java.use("java.lang.NumberFormatException")
export let Object = Java.use("java.lang.Object")
export let OutOfMemoryError = Java.use("java.lang.OutOfMemoryError")
export let Override = Java.use("java.lang.Override")
export let Package = Java.use("java.lang.Package")
export let Process = Java.use("java.lang.Process")
export let ProcessBuilder = Java.use("java.lang.ProcessBuilder")
export let Readable = Java.use("java.lang.Readable")
export let ReflectiveOperationException = Java.use("java.lang.ReflectiveOperationException")
export let Runnable = Java.use("java.lang.Runnable")
export let Runtime = Java.use("java.lang.Runtime")
export let RuntimeException = Java.use("java.lang.RuntimeException")
export let RuntimePermission = Java.use("java.lang.RuntimePermission")
export let SafeVarargs = Java.use("java.lang.SafeVarargs")
export let SecurityException = Java.use("java.lang.SecurityException")
export let SecurityManager = Java.use("java.lang.SecurityManager")
export let Short = Java.use("java.lang.Short")
export let StackOverflowError = Java.use("java.lang.StackOverflowError")
export let StackTraceElement = Java.use("java.lang.StackTraceElement")
export let StrictMath = Java.use("java.lang.StrictMath")
export let String = Java.use("java.lang.String")
export let StringBuffer = Java.use("java.lang.StringBuffer")
export let StringBuilder = Java.use("java.lang.StringBuilder")
export let StringIndexOutOfBoundsException = Java.use("java.lang.StringIndexOutOfBoundsException")
export let SuppressWarnings = Java.use("java.lang.SuppressWarnings")
export let System = Java.use("java.lang.System")
export let Thread = Java.use("java.lang.Thread")
export let ThreadDeath = Java.use("java.lang.ThreadDeath")
export let ThreadGroup = Java.use("java.lang.ThreadGroup")
export let ThreadLocal = Java.use("java.lang.ThreadLocal")
export let Throwable = Java.use("java.lang.Throwable")
export let TypeNotPresentException = Java.use("java.lang.TypeNotPresentException")
export let UnknownError = Java.use("java.lang.UnknownError")
export let UnsatisfiedLinkError = Java.use("java.lang.UnsatisfiedLinkError")
export let UnsupportedClassVersionError = Java.use("java.lang.UnsupportedClassVersionError")
export let UnsupportedOperationException = Java.use("java.lang.UnsupportedOperationException")
export let VerifyError = Java.use("java.lang.VerifyError")
export let VirtualMachineError = Java.use("java.lang.VirtualMachineError")
export let Void = Java.use("java.lang.Void")